* Интро
Подготовка к собеседованиям

* Вопросы и задачи по докер
https://habr.com/ru/company/southbridge/blog/528206/
** Интро по докеру: что и как

   Докер - это платворма для разработки, доставки и эксплуатации
   приложений. Позволяет изолированно тестировать продукты, быстро
   передавать их клиентам и другой части команды.

   Преимущества:
   - контролируемая среда
   - нет vendor lock-in - т.е. нет жесткой привязки к самому докеру, переход
     с него и на него достаточно легок
   - эффективное управдение серверными ресурсами

   Другие возможные варианты для тестирования:
   - установочный скрипт
   Если на стороне клиента что-то не сработает, то придется выяснять, в чем
   дело + откатывать назад изменения, которые скрипт успел произвести до
   ошибки

   - облачный сервис
   Минус с vendor lock-in: мы привязаны к одному облаку + все облачные
   сервисы медленные

   - виртуальные машины
   Любое изменение в образе требует его переустановки целиком

** Случаи применения docker-а

   https://habr.com/ru/company/ruvds/blog/439978/#comment_19753180

   - изоляция приложений

   - быстрое развертывание на уровне операционной системы

   - упростить процесс настройки

   - облегчить жизнь разрабам, что позволяет сосредоточиться на коде

   - улучшить плотность использования серверов

** Что такое image

   Образ Docker — это набор файлов, соединенный с настройками, с помощью
   которого можно создать экземпляры, которые запускаются в отдельных
   контейнерах в виде изолированных процессов.

   Т.е. это шаблон того, как должен выглядеть контейнер.

   Образ строится с использованием инструкций для получения полной исполняемой версии
   приложения, зависящей от версии ядра сервера. Команда Docker run
   используется для создания таких экземпляров, называемых контейнерами,
   запускаемыми с использованием образов Docker. При запуске одного образа
   пользователь может создать несколько контейнеров.

   Образы наследуются: берем подходящий доступный образ и наследуемся от
   него. Запущенный работающий образ - это контейнер.

   Если создать 100 контейнеров, внутри каждого из которых есть файловая
   система, то на самом деле файловая система будет скачана 1 раз. И
   контейнеры просто разделяет ее между собой. Поэтому докер весит
   меньше, чем виртуальные машины.

   В случае, если что-то будет изменено, то скачаются только изменения,
   все целиком перезаливать не нужно.

   Это достигается за счет использования union file system.

** Union file system

   Это вспомогательная файловая система, производящая каскадно-объединенное
   монтирование других файловых систем. Каскадно-объединенное монтирование
   позволяет монтировать несколько файловых систем как одну.

   Каталоги, которые имеют тот же путь в объединённых ветвях, будут
   совместно отображать содержимое в объединённом каталоге новой виртуальной
   файловой системы. Когда ветви монтируются, то указывается приоритет одной ветви над
   другой.

   Только одна из файловых систем имеет права на чтение-запись, остальные
   имеют право только на чтение. UnionFS использует копирование при записи:
   пока идет чтение, все ок и копия общая, но если нужно записать, то
   создается новая копия.

   Таким образом получается только видимость изменяемой файловой системы,
   хотя на самом деле она остается неизменной.

** Что такое виртуализация

   Виртуализация - это создание виртуальных барьеров между несколькими
   виртуальными средами, работающими в одной физической среде. Большая
   разница заключается в том, что виртуализированная среда - это одна и та
   же архитектура.

   Виртуализированное приложение может предоставлять
   виртуализированные устройства, которые затем преобразуются в
   физические устройства, и хост виртуализации имеет контроль над тем,
   какая виртуальная машина имеет доступ к каждому устройству или части
   устройства.

   Фактическое выполнение чаще всего все еще выполняется
   изначально, хотя и не через программное обеспечение. Поэтому
   производительность виртуализации обычно намного выше, чем эмуляции.

   Есть три типа виртуализации:

   - Эмуляция
   https://coderoad.ru/6044978/%D0%9F%D0%BE%D0%BB%D0%BD%D0%B0%D1%8F-%D1%8D%D0%BC%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-%D0%BF%D1%80%D0%BE%D1%82%D0%B8%D0%B2-%D0%BF%D0%BE%D0%BB%D0%BD%D0%BE%D0%B9-%D0%B2%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8

   Эмуляция - это это использование программного обеспечения для обеспечения
   другой среды выполнения или архитектуры. Допустим, существует эмуляция
   андроида, которая запущена на винде. В винде нет процессора для андроида,
   поэтому его работу выполняет приложение. Поэтому эмуляцию по-другому
   называют полной виртуализацией.

   - Паравиртуализация

   Она быстрее эмуляции, потому что не эмуляирует всю архитектуру
   полностью. Отличие от эмцляции состоит в том, что сетевые и дисковые
   устройства могут быть доступны напрямую через специальные вызовы (с
   некоторым оговорками)

   - Контейнерная виртуализация
   Операционная система поддерживает несколько изолированных экземпляров
   пространств пользователя вместо одного. Эти экземляры и есть
   контейнеры.

   Пользовательское пространство - это адресное пространство виртуальной
   памяти, отводимое для пользовательских программ.


** Из чего состоит архитектура docker

   - сервер - он де демон Докер
   содержит сервис докер: образы, контейнеры. Сервис связывается с Registry,
   образы — метаданные приложений, запускаемых в контейнерах Docker.

   - клиент
   применяется для общения - различных действий - с сервером докера

   - registry
   Хранит в себе все образы

** Еще термины docker

   - демон докер - сервер

   - тома docker - docket volumes - способ хранения данных, потребляемых
     или производимых приложениями

   - репозиторий докер - набор образов, обладающих одинаковыми именами,
     но разными тегами. Обычно в репе хранятся разные версии одних и тех
     же образов

   - теги - идентификаторы образов

** Подробнее про registry

   Это система по хранению образов. Есть два публичных сервиса по хранению
   образов: docker hub и docker cloud. Образы создают и заливают разрабы со
   всего мира.

** Что такое контейнер

   Это базовая единица среды, программного обеспечения, покрывающая весь код
   безопасно и прозрачно. Наследуется от образа. Содержит в себе все
   необходимое для запуска приложения: библиотеки, переменняе окружения и
   т.д. Даже с виду одинаковые контейнеры с одной файловой системой
   изолированы друг от друга благодаря пространству имен.

** Что такое пространства имен docker

   Пространства имен Docker — это технология обеспечения изолированных
   рабочих пространств, известная как контейнер. Как только контейнер
   запускается, создается набор пространств имен для этого контейнера. Они
   обеспечивают уровень изоляции для контейнеров, поскольку каждый контейнер
   работает в отдельном пространстве имен, с ограничением доступа к другим пространствам.

** Жизненный цикл контейнера

   - Создание контейнера

   - Работа контейнера

   - Приостановка контейнера

   - Возобновление работы контейнера

   - Запуск контейнера

   - Остановка контейнера

   - Перезапуск контейнера

   - Принудительная остановка контейнера

   - Удаление контейнера

** Что такое объекты докера

Образы, контейнеры, сервисы

** Про связь контейнеров друг с другом

   Соединённые с помощью сети контейнеры могут выполняться на одном и том же
   хосте или на разных хостах.

   Контейнерам для запуска нужен хост - это может быть как физическая
   машина (чаще), так и виртуальная. Нахосте должен быть докер-клиент и
   докер-демон, чтоб с одной стороны иметь возможность слать и скачивать
   образы, а с другой - управлять контейнерами. Соотнешение между хостом
   и контейнерами это 1:N - т.е.хост один, а контейнеров,запущенных на
   нем, много.

   - Если хостов много, то фокус на двух вещах: как контейнеры общаются с
     хостом и как хосты коммуницируют друг с другом.

   Контейнеры могут быть подключены более чем к 1 сети, но могут посылать
   пакеты друг другу только в том случае, если они оба подключены к одной
   и той же сети.

*** bridge mode

    https://docs.docker.com/network/bridge/

   С точки зрения Docker, bridge сеть использует программный мост, который
   позволяет контейнерам, подключенным к одной и той же  bridge сети,
   взаимодействовать, обеспечивая при этом изоляцию от контейнеров, которые
   не подключены к этой сети. Драйвер Docker bridge автоматически
   устанавливает правила на хост-машине, чтобы контейнеры в разных мостовых
   сетях не могли напрямую взаимодействовать друг с другом.

   bridge сети применяются к контейнерам, работающим на одном и том же
   хосте демона Docker. Для связи между контейнерами, работающими на разных
   хостах демона Docker, можно либо управлять маршрутизацией на уровне
   операционной системы, либо использовать оверлейную сеть.

   При запуске Docker автоматически создается ~bridge сеть по умолчанию~
   (также называемая мостом), и вновь запущенные контейнеры подключаются к
   ней, ~если не указано иное~. Так же можно создавать пользовательские
   bridge сети и их приоритет будет выше, чем те, что созданы по
   умолчанию.

**** Отличия между пользователькими bridge-сетями и по bridge-сетями умолчанию

   - пользовательские bridge-сети обеспечивают автоматическое разрешение
     DNS между контейнерами

   Это значит, что в пользовательской сети контейнеры могут обращаться
   друг к другу по имени или псевдониму, в то время как в сети по
   умолчанию - только по ip. Обращение по ip требует ручной настройки,
   т.е. нужно прописать ссылки от одного контейнера к другому и наоборот
   черед --link, чтоб они могли общаться. Что геморно.

  - польховательские сети обеспечивают лучшую изоляцию

  К сети по умолчанию подключаются все контейнеры, к пользовательской
  сети только те, которым она указана.

  - можно прикреплять и откреплять контейнеры от сети на лету

  Для сетей по умолчанию контейнер придется сначала остановить, чтоб
  открепить его от сети

  - каждая пользовательская сеть создает конфигурируемый мост

  Конфигурирование сети по умолчанию происходит за пределами докера и
  требует его рестарта. К тому же у всех контейнеров будут одни и те же
  настройки сети. А пользовательские сети настраиваются внутри докера,
  так что рестарт не трубется.

  - слинкованные (связанные) контейнеры, использющие семь по умолчанию,
    разделяют переменные окружения

*** host mode

    https://docs.docker.com/network/host/

    В этом случае контейнер не получает свой собственный ip и порт,
    сетевой стек контейнера не изолирован от хоста и контейнер использует
    пространство имен хоста.

    Этот мод доступен только для линукс. Хорош для оптимизации в
    случаях, когда контенер должне обрабатывать дольшой диапазон портов
    (зачем?).

*** overlay mode

    Драйвер этого мода создает распределенную сеть между несколькими демонами
    докера.

    Эта сеть накладывается поверх host-specific сетей, позволяя
    подключенным к ней контейнерам (включая контейнеры службы
    swarm) безопасно взаимодействовать при включенном шифровании. Docker
    обрабатывает маршрутизацию каждого пакета сначала к нужному хосту, а
    затем к нужному контейнеру в этом хосте.

*** container mode

    В этом случае я говорю использовать сетевое пространство имен одного контейнера
    для другого.

*** none mode

    Этот режим помещает контейнер в свой собственный сетевой стек, но не
    настраивает его. В результате контейнер оказывается как бы вне
    сети. Это полезно в 2х случаях: когда контенеру не нужна сеть вообще
    и когда контейнер будет подключен к какой-то пользовательской сети.


*** Сети, доступные в докер по умолчанию

  - bridge -  сеть, к которой подключаются контейнеры, если не указано иначе.
  - none -  сетевой стек без наличия сетевого интерфейса в контейнере
  - host -  подключение к сетевому стеку сервера.

** Dockerfile

   https://habr.com/ru/company/ruvds/blog/439980/

   Этот файл описывает, как должен быть собран образ, в каком порядке должны
   быть расположены слои и т.д.
   Каждый слой, на самом деле, это всего лишь файл, который описывает
   изменение состояния образа в сравнении с тем состоянием, в котором он
   пребывал после добавления предыдущего слоя.

   Базовый образ = родительский образ = базовый слой. При создании образа
   слой добавляется за слоем. Слой, в который можно восить изменения,
   находится поверх остальных слоев.

   Если нужно установить какие-то пакеты, то нижележащий слой должен
   предоставить слою, в которые устанавливаюся пакеты, пакетный
   менеджер - иначе ничего не установится.

*** Базовые команды

    Краткий справочник команд
    https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index

   - FROM — задаёт базовый (родительский) образ. С него должен начинаться докерфайл.

   - LABEL — описывает метаданные. Например — сведения о том, кто создал и
     поддерживает образ. Не увеличивает время создания образа или его
     вес, рекомендуется использовать при создании образа.

   - ENV — устанавливает постоянные переменные среды. Хорошо подходит для
     задания констант, если некоторое значение будет использоваться много
     раз.

   - RUN — выполняет команду и создаёт слой образа. Используется для установки
           в контейнер пакетов.

   - COPY — копирует в контейнер файлы и папки.

   - ADD — копирует файлы и папки в контейнер, может распаковывать
     локальные .tar-файлы.

   - CMD — описывает команду с аргументами, которую нужно выполнить когда
     контейнер будет запущен. Аргументы могут быть переопределены при запуске
     контейнера. В файле может присутствовать лишь одна инструкция CMD,
     если их несколько, то исполнится только последняя.

     Инструкция CMD может иметь exec-форму. Если в эту инструкцию не
     входит упоминание исполняемого файла, тогда в файле должна
     присутствовать инструкция ENTRYPOINT. В таком случае обе эти
     инструкции должны быть представлены в формате JSON.

     Аргументы командной строки, передаваемые docker run, переопределяют
     аргументы, предоставленные инструкции CMD в Dockerfile.

   - WORKDIR — задаёт рабочую директорию для следующей инструкции.

     Лучше устанавливать с помощью WORKDIR абсолютные пути к папкам, а не
     перемещаться по файловой системе с помощью команд cd в Dockerfile.

     Инструкция WORKDIR автоматически создаёт директорию в том случае, если
     она не существует.

     Можно использовать несколько инструкций WORKDIR. Если таким
     инструкциям предоставляются относительные пути, то каждая из них
     меняет текущую рабочую директорию.

   - ARG — задаёт переменные для передачи Docker во время сборки образа.

     В отличие от ENV-переменных, ARG-переменные недоступны во время
     выполнения контейнера. Однако ARG-переменные можно использовать для
     задания значений по умолчанию для ENV-переменных из командной строки
     в процессе сборки образа. А ENV-переменные уже будут доступны в
     контейнере во время его выполнения. Подробности о такой методике
     работы с переменными можно почитать. см здесь
     https://vsupalov.com/docker-build-time-env-values/

   - ENTRYPOINT — предоставляет команду с аргументами для вызова во время
     выполнения контейнера. Аргументы не переопределяются как у
     CMD. Вместо этого аргументы командной строки, передаваемые в
     конструкции вида docker run my_image_name, добавляются к аргументам,
     задаваемым инструкцией ENTRYPOINT.

   - EXPOSE — указывает на необходимость открыть порт, чтоб общаться с
     контейнером. Но сама порт не открывает (!)

     Для того чтобы открыть порт (или порты) и настроить перенаправление
     портов, нужно выполнить команду docker run с ключом -p. Если
     использовать ключ в виде -P (с заглавной буквой P), то открыты будут
     все порты, указанные в инструкции EXPOSE

   - VOLUME — создаёт точку монтирования для работы с постоянным хранилищем.
