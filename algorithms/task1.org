* Задача: ...

~Цель:~ породить все возможные перестновки списка значений от 1 до n.
Кол-во перестановок для n ~без повторений~ = n!

** Часть 1

~Идея решения:~

Похоже на сложение в столбик с некоторыми дополнениями.

Список значений представляется как единое число, где первый элемент
списка - самый старший разряд, а самый последний - самый младший. Мы
последовательно инкрементируем все разряды, переходя от младших к
старшим. Процесс инкрементирования заканчивается, когда все элементы
исходного списка значений получают максимальные значения, т.е. все
разряды числа достигают своего заданного максимума.

[TODO:0xB] Какая функция делает это? Везде, где описывается кусок
алгоритма я бы хотел видеть указание на код, который могу смотреть
чтобы сравнить с описанием

Но есть отличия от привычного сложения в столбик:
1. При переполнении разряда, мы записываем в него не 0, а 1.
2. Максимальное значение разряда можно указать на входе. Если
   максимальное значение равно 5, то ни в одном разряде не будет больше
   этого числа. При попытке инкрементировать разряд, достигший своего
   максимального значения, мы запишем в этот разряд 1 и запомним, что
   должны добавить единицу к следующему старшему разряду.

При каждой итерации инкрементирования мы создаем новый список, который
является результатом данной итерации, а затем собираем все эти списки в
единый список списков.

Мы сделаем реверс исходного списка значений перед тем, как начать инкрементировать
его элементы, чтоб было легче воспринимать код. Не приходится
представлять, как элементы добавляются в новый список на каждой итерации
справа налево.

** Часть вторая

Наше своеобразное сложение в столбик породит перестановки с повторениями,
которые нам не нужны. Поэтому после того, как получим все возможные
перестановки, мы применим фильтр, который оставит только те перестановки,
элементы которых не повторяются.

Фильтр работает просто: каждый элемент списка сранивается с каждый
элементом списка. Если какие-либо элементы списка совпадают, сравнение
прекращается и возвращается nil. Достижение конца списка означает, что ни
один элемент не повтрился.

~Запуск~:

Для запуска понадобится изначальный список значений, который может быть
любой длины и состоять из любых целых чисел, и максимально допустимое
значение для разрядов.

Но если мы хотим соблюсти правило, что кол-во перестановок для n = n!,
то кол-во элементов в списке значений, их максимальное значение и n
должны быть одинаковыми.

~Реализация решения:~

#+BEGIN_SRC lisp
  ;; проверяет, достигли ли все элементы в списке макс. значения
  (defun max-value? (lst max)
    (if (null lst)
        t
        (if (= (car lst) max)
            (max-value? (cdr lst) max)
            nil)))

  ;; отфильтровывает комбинации, в которых есть одинаковые элементы
  (defun sort-combinations (results)
    (if (null results)
        '()
        (if (filter (car results))
            (cons (car results) (sort-combinations (cdr results)))
            (sort-combinations (cdr results)))))

  (defun filter-iter (elt lst)
    (if (null lst)
        t
        (if (= elt (car lst))
            nil
            (filter-iter elt (cdr lst)))))

  (defun filter (lst)
    (if (null lst)
        t
        (if (filter-iter (car lst) (cdr lst))
            (filter (cdr lst))
            nil)))

  ;; инкрементирует разряд числа
  (defun inc-rank-iter (cur-list max-value new-list)
    ;; если достигли начала списка
    (if (null cur-list)
        ;; возвращаем результат
        (reverse new-list)
        ;; если текущий элемент списка достиг своего максимального значения
        (if (= (car cur-list) max-value)
            ;; заносим в новый список единицу и проверяем следующий разряд,
            (progn
              (setf new-list (append new-list '(1)))
              (inc-rank-iter (cdr cur-list) max-value new-list))
            ;; иначе копируем остаток исходного списка
            (let ((copy (copy-list (cdr cur-list))))
              ;; инкрементим текущий разряд, присоединяем его к новому списку
              (setf new-list (append (list (incf (car cur-list))) new-list))
              ;; присоединяем к новому списку оставшиеся элементы
              (setf new-list (append (reverse new-list) copy))
              ;; возвращаем результат
              (reverse new-list)))))

  (defun inc-rank (cur-list max-value)
    (inc-rank-iter (reverse cur-list) max-value '()))

  ;; (inc-rank '(1 1 1 1) 4)
  ;; (inc-rank '(1 2 3 4) 4)
  ;; (inc-rank '(3 2 4 4) 4)
  ;; (inc-rank '(4 3 3 3) 4)
  ;; (inc-rank '(4 3 4 4) 4)
  ;; (inc-rank '(1 2 3 4 5 6 7) 7)

  (defun get-all-combinations (int-list max)
    (defun iter (max cur-list result-list)
      (setf result-list (cons cur-list result-list))
      (if (max-value? cur-list max)
            (sort-combinations result-list)
          (let ((new-lst (inc-rank cur-list max)))
            (iter max new-lst result-list))))
    (iter max int-list '()))

  ;; Тесты и старт
  ;; (length (get-all-combinations '(1 1 1 1 1 1 1) 7))
  ;; (length (get-all-combinations '(1 2 3 4 5 6 7) 7))
  ;; (get-all-combinations '(1 1 1 1 1 1) 6)
  ;; (get-all-combinations '(1 2 3) 7)

#+END_SRC
